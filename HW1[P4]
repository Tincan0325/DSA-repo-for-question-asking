#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int preced(int oper){
    char c =(char)(oper);
    if(c=='+' || c=='-')
        return 1;
    else if(c=='*' || c== '/' || c=='%')
        return 2;
    else if(c=='(')
        return 0;
}

int pn(long long a){
    if(a>0) 
        return 1;
    else return 0;
}

int main(){
    char* input = (char*)(malloc(sizeof(char)*1000000));
    scanf("%s", input);
        
    int count = 0;
    int** arr = (int**)(malloc(sizeof(int*)*2));
    for(int i=0; i<2; i++)
        arr[i] = (int*)(malloc(sizeof(int)*1000000));
    int number;
    int len = 0;

    for(int i=0; i<strlen(input); i++){
        if(input[i]>=48 && input[i]<=57){
            count++;
        }
        else{
            if(count!=0){
                char* temp = (char*)(malloc(sizeof(char)*10));
                memcpy(temp, input+i-count, count);
                temp[count] = '\0';
                number = atoi(temp);
                arr[0][len] = 1;
                arr[1][len] = number;
                len++;
                free(temp);
            }
            arr[0][len] = 0;
            arr[1][len] = (long long int)(input[i]);
            len++;
            count = 0;
        }
    }

    /*for(int i=0; i<len; i++){
        if(arr[0][i]==1)
            printf("%d", arr[1][i]);
        else 
            printf("%c", (char)(arr[1][i]));
    }
    printf("\n");*/
        

    long long int* stack = (long long int*)(malloc(sizeof(long long)*1000000));
    int** buf = (int**)(malloc(sizeof(int*)*2));
    for(int i=0; i<2; i++)
        buf[i] = (int*)(malloc(sizeof(int)*1000000));
    
    int top = -1;
    int count_ = 0;
    for(int i=0; i<len; i++){
        if(arr[0][i] == 1){
            buf[0][count_] = arr[0][i];
            buf[1][count_] = arr[1][i];
            count_++;
        }
        else if(arr[1][i] == '='){
            while(top!=-1){
                buf[0][count_] = 0;
                buf[1][count_] = stack[top];
                top--;
                count_++;
            }
            buf[0][count_]= 0;
            buf[1][count_]='=';
            count_++;
        }
        else if(arr[1][i] == '('){
            stack[top+1]=arr[1][i];
            top++;
        }
        else if(arr[1][i] == ')'){
            while(stack[top]!='('){
                buf[0][count_] = 0;
                buf[1][count_] = stack[top];
                top--;
                count_++;
            }
            top--;
        }
        else{
            if(top == -1){
                top++;
                stack[top] = arr[1][i];
            }
            else{
                while(preced(stack[top])>=preced(arr[1][i]) && top!=-1){
                    buf[1][count_] = stack[top];
                    buf[0][count_] = 0;
                    count_++;
                    top--;
                } 
                top++;
                stack[top] = arr[1][i];  
            }  
        }
    }

    /*for(int i=0; i<len; i++){
        if(buf[0][i]==1)
            printf("%d", buf[1][i]);
        else 
            printf("%c", (char)(buf[1][i]));
    }
    printf("\n");*/

    top = -1;
    long long a, b;
    long long ans;

    for(int i=0; i<=len; i++){
        if(buf[0][i]==1){  
            stack[top+1] = buf[1][i];
            top++;
        }
        else{
            if(buf[1][i]=='='){
                printf("Print: %lld\n", stack[0]);
                top=0;
            }
            else{
                b = stack[top];
                top--;
                a = stack[top];
                top--;
                if(buf[1][i] == '+')
                    ans = a+b;
                else if(buf[1][i]=='-')
                    ans = a-b;
                else if(buf[1][i]=='*')
                    ans = a*b;
                else if(buf[1][i]=='/'){
                    if (pn(a)*pn(b)>0)
                        ans = a/b;
                    else 
                        ans = a/b-1;
                }
                    
                else if(buf[1][i]=='%'){
                    ans = a % b;
                }
                stack[top+1] = ans;
                top++;
            }
        }
    }

    
    free(stack);
    for(int i=0; i<2; i++){
        free(arr[i]);
        free(buf[i]);
    }
    free(arr);
    free(buf);
    free(input);

    return 0;
}
